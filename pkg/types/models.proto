syntax = "proto3";

package od2_network.hive;
option go_package = "go.od2.network/hive/pkg/types";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

message ItemLocator {
  string collection = 1;
  string id = 2;
}

message ItemPointer {
  ItemLocator dst = 1;
  google.protobuf.Timestamp timestamp = 2;
  // int64 pipeline = 3;
  // ItemLocator src = 4;
}

enum TaskStatus {
  SUCCESS = 0;
  TIMEOUT = 1;
  CLIENT_FAILURE = 2;
}

message TaskResult {
  ItemLocator item = 1;
  int64 task_id = 2;
  int64 pipeline = 3;
  TaskStatus status = 4;
  google.protobuf.Timestamp finish_time = 5;
  google.protobuf.Duration duration = 6;
}

// Assignments streams task assignments to workers.
service Assignments {
  // OpenAssignmentsStream opens a new gRPC assignments stream.
  // The assignments are load-balanced over all the active assignment streams.
  rpc OpenAssignmentsStream(OpenAssignmentsStreamRequest) returns (OpenAssignmentsStreamResponse) {}

  // CloseAssignmentsStream closes a gRPC assignments stream.
  rpc CloseAssignmentsStream(CloseAssignmentsStreamRequest) returns (CloseAssignmentsStreamResponse) {}

  // GetPendingAssignmentsCount returns the number of assignments that the server will push to the worker.
  // Calling WantAssignments increases this number.
  rpc GetPendingAssignmentsCount(GetPendingAssignmentsCountRequest) returns (PendingAssignmentsCount) {}

  // WantAssignments tells the server to send more assignments.
  rpc WantAssignments(WantAssignmentsRequest) returns (WantAssignmentsResponse) {}

  // StreamAssignments connects to the server-to-client assignment stream.
  rpc StreamAssignments(StreamAssignmentsRequest) returns (stream Assignment) {}
}

message OpenAssignmentsStreamRequest {}
message OpenAssignmentsStreamResponse {
  int64 stream_id = 1;
}

message CloseAssignmentsStreamRequest {
  int64 stream_id = 1;
}
message CloseAssignmentsStreamResponse {}

message WantAssignmentsRequest {
  int64 stream_id = 1;
  int32 add_watermark = 2; // Request N additional tasks
}
message WantAssignmentsResponse {
  int32 added_watermark = 1; // N additional tasks granted
  int32 watermark = 2; // Total number of tasks granted
}

message StreamAssignmentsRequest {
  int64 stream_id = 1;
}

message GetPendingAssignmentsCountRequest {
  int64 stream_id = 1;
}

message PendingAssignmentsCount {
  int32 watermark = 1; // N additional tasks for this stream
}

// Assignment instructs the client to fetch an item.
message Assignment {
  ItemLocator locator = 1;
  int32 kafka_partition = 2;
  int64 kafka_offset = 3;
}
