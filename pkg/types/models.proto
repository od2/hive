syntax = "proto3";

package od2_network.hive;
option go_package = "go.od2.network/hive/pkg/types";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

message ItemLocator {
  string collection = 1;
  string id = 2;
}

message ItemPointer {
  ItemLocator dst = 1;
  google.protobuf.Timestamp timestamp = 2;
  // int64 pipeline = 3;
  // ItemLocator src = 4;
}

enum TaskStatus {
  SUCCESS = 0;
  TIMEOUT = 1;
  CLIENT_FAILURE = 2;
}

message TaskResult {
  ItemLocator item = 1;
  int64 task_id = 2;
  int64 pipeline = 3;
  TaskStatus status = 4;
  google.protobuf.Timestamp finish_time = 5;
  google.protobuf.Duration duration = 6;
}

// Assignments streams task assignments to workers.
service Assignments {
  // StartWork marks the worker as activated allocates a channel for assignment streams.
  rpc StartWork(StartWorkRequest) returns (StartWorkResponse) {}
  // StopWork marks the worker to be stopped.
  // The pipeline actually stops when all items have been consumed or rejected.
  rpc StopWork(StopWorkRequest) returns (StopWorkResponse) {}
  // StreamAssignments creates a server-to-client assignment stream.
  // The assignments are load-balanced over all the active assignment streams.
  rpc StreamAssignments(StreamAssignmentsRequest) returns (stream Assignment) {}
}

message StartWorkRequest {}
message StartWorkResponse {}

message StopWorkRequest {}
message StopWorkResponse {}

message StreamAssignmentsRequest {}

// Assignment is the
message Assignment {
  ItemLocator locator = 1;
  int32 kafka_partition = 2;
  int64 kafka_offset = 3;
}
