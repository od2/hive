// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AssignmentsClient is the client API for Assignments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssignmentsClient interface {
	// StartWork instructs the server a
	StartWork(ctx context.Context, in *StartWorkRequest, opts ...grpc.CallOption) (*StartWorkResponse, error)
	StopWork(ctx context.Context, in *StopWorkRequest, opts ...grpc.CallOption) (*StopWorkResponse, error)
	// StreamAssignments opens a channel .
	// When running multiple channels,
	StreamAssignments(ctx context.Context, in *StreamAssignmentsRequest, opts ...grpc.CallOption) (Assignments_StreamAssignmentsClient, error)
}

type assignmentsClient struct {
	cc grpc.ClientConnInterface
}

func NewAssignmentsClient(cc grpc.ClientConnInterface) AssignmentsClient {
	return &assignmentsClient{cc}
}

func (c *assignmentsClient) StartWork(ctx context.Context, in *StartWorkRequest, opts ...grpc.CallOption) (*StartWorkResponse, error) {
	out := new(StartWorkResponse)
	err := c.cc.Invoke(ctx, "/od2_network.hive.Assignments/StartWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentsClient) StopWork(ctx context.Context, in *StopWorkRequest, opts ...grpc.CallOption) (*StopWorkResponse, error) {
	out := new(StopWorkResponse)
	err := c.cc.Invoke(ctx, "/od2_network.hive.Assignments/StopWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentsClient) StreamAssignments(ctx context.Context, in *StreamAssignmentsRequest, opts ...grpc.CallOption) (Assignments_StreamAssignmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Assignments_ServiceDesc.Streams[0], "/od2_network.hive.Assignments/StreamAssignments", opts...)
	if err != nil {
		return nil, err
	}
	x := &assignmentsStreamAssignmentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Assignments_StreamAssignmentsClient interface {
	Recv() (*Assignment, error)
	grpc.ClientStream
}

type assignmentsStreamAssignmentsClient struct {
	grpc.ClientStream
}

func (x *assignmentsStreamAssignmentsClient) Recv() (*Assignment, error) {
	m := new(Assignment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AssignmentsServer is the server API for Assignments service.
// All implementations must embed UnimplementedAssignmentsServer
// for forward compatibility
type AssignmentsServer interface {
	// StartWork instructs the server a
	StartWork(context.Context, *StartWorkRequest) (*StartWorkResponse, error)
	StopWork(context.Context, *StopWorkRequest) (*StopWorkResponse, error)
	// StreamAssignments opens a channel .
	// When running multiple channels,
	StreamAssignments(*StreamAssignmentsRequest, Assignments_StreamAssignmentsServer) error
	mustEmbedUnimplementedAssignmentsServer()
}

// UnimplementedAssignmentsServer must be embedded to have forward compatible implementations.
type UnimplementedAssignmentsServer struct {
}

func (UnimplementedAssignmentsServer) StartWork(context.Context, *StartWorkRequest) (*StartWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWork not implemented")
}
func (UnimplementedAssignmentsServer) StopWork(context.Context, *StopWorkRequest) (*StopWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWork not implemented")
}
func (UnimplementedAssignmentsServer) StreamAssignments(*StreamAssignmentsRequest, Assignments_StreamAssignmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAssignments not implemented")
}
func (UnimplementedAssignmentsServer) mustEmbedUnimplementedAssignmentsServer() {}

// UnsafeAssignmentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssignmentsServer will
// result in compilation errors.
type UnsafeAssignmentsServer interface {
	mustEmbedUnimplementedAssignmentsServer()
}

func RegisterAssignmentsServer(s grpc.ServiceRegistrar, srv AssignmentsServer) {
	s.RegisterService(&Assignments_ServiceDesc, srv)
}

func _Assignments_StartWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentsServer).StartWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/od2_network.hive.Assignments/StartWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentsServer).StartWork(ctx, req.(*StartWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assignments_StopWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentsServer).StopWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/od2_network.hive.Assignments/StopWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentsServer).StopWork(ctx, req.(*StopWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assignments_StreamAssignments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAssignmentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AssignmentsServer).StreamAssignments(m, &assignmentsStreamAssignmentsServer{stream})
}

type Assignments_StreamAssignmentsServer interface {
	Send(*Assignment) error
	grpc.ServerStream
}

type assignmentsStreamAssignmentsServer struct {
	grpc.ServerStream
}

func (x *assignmentsStreamAssignmentsServer) Send(m *Assignment) error {
	return x.ServerStream.SendMsg(m)
}

// Assignments_ServiceDesc is the grpc.ServiceDesc for Assignments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Assignments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "od2_network.hive.Assignments",
	HandlerType: (*AssignmentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartWork",
			Handler:    _Assignments_StartWork_Handler,
		},
		{
			MethodName: "StopWork",
			Handler:    _Assignments_StopWork_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAssignments",
			Handler:       _Assignments_StreamAssignments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "models.proto",
}
