package token

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

var id2 = ID{
	0x00, 0x01, 0x02, 0x03,
	0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0A, 0x0B,
	0x0C, 0x0D, 0x0E, 0x0F,
}

var serializedSP2 = []byte{
	0x0b,
	// Tag
	0xaa, 0xd6, 0x5b, 0x4a, 0x83, 0xfe, 0x75, 0x91, 0x07, 0xc6, 0x7f, 0xd4, 0x6f, 0x84, 0xf8, 0xf3,
	// ID
	0x00, 0x01, 0x02, 0x03,
	0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0A, 0x0B,
	0x0C, 0x0D, 0x0E, 0x0F,
}

func TestSigner_Sign(t *testing.T) {
	signer := NewSimpleSigner(&[32]byte{0x03})
	sp := signer.SignNoErr(id2)
	assert.Equal(t, serializedSP2, sp.Serialize())
}

func TestSigner_Verify(t *testing.T) {
	var sp2 SignedPayload
	assert.NoError(t, sp2.Deserialize(serializedSP2))
	assert.True(t, NewSimpleSigner(&[32]byte{0x03}).VerifyTag(&sp2))
	assert.False(t, NewSimpleSigner(&[32]byte{0x04}).VerifyTag(&sp2))
	sp3 := sp2
	sp3.ID[0] = 99
	assert.False(t, NewSimpleSigner(&[32]byte{0x03}).VerifyTag(&sp3))
}
