@startuml

title Redis data structures

hide stereotype
skinparam usecase {
  BorderColor<<Session>> Navy
  BorderColor<<Flow>> Green
  BorderColor<<Deliver>> DarkCyan
}

card Session {
  card H_Sess_Serial [
    H: Worker
    -> Sess Serial
  ]
  card H_Sess_Count [
    H: Worker
    -> Sess Count
  ]
  card Z_Sess_Exp [
    Z: (worker, sess)
    by exp
  ]

  usecase Sess_Open <<Session>>
  usecase Sess_Close <<Session>>
  entity Sess_Exp <<Session>>

  H_Sess_Serial -[#Navy]> Sess_Open: HINCRBY +1
  H_Sess_Count <-[#Navy]- Sess_Open: HINCRBY +1
  Sess_Open -[#Navy]> Z_Sess_Exp: ZADD
  Sess_Close --[#Navy]> Z_Sess_Exp: ZREM
  Sess_Close --[#Navy]> H_Sess_Count: HINCRBY -1
  Sess_Exp <-[#Navy]- Z_Sess_Exp: ZRANGEBYSCORE
  Sess_Close <-[#Navy]- Sess_Exp: call
}

card "Flow Control" {
  card H_Sess_Quota [
    H: Sess
    -> Int
  ]
  card H_Worker_Quota [
    H: Worker
    -> Int
  ]

  usecase Sess_Want <<Flow>>
}

card "N-Assign" {
  card "Int: Progress" as INT_Progress
  card Z_Worker_Offset [
    Z: Worker
    by offset
  ]

  entity Assign
}

card Deliver {
  card "X: Worker" as X_Worker
  card "X: Results" as X_Results

  usecase Sess_Read <<Deliver>>
  entity Task_Exp <<Deliver>>
  usecase Sess_Ack <<Deliver>>
}

Z_Sess_Exp <-[#Green]- Sess_Want: HEXISTS
Sess_Want --[#Green]> H_Sess_Quota: HINCRBY n
Sess_Want -[#Green]> H_Worker_Quota: HINCRBY n

Assign <-- Z_Worker_Offset: ZPOPMIN
Assign --> Z_Worker_Offset: ZADD
Assign --> X_Worker: XADD
H_Worker_Quota <- Assign: HINCRBY -1
Assign -> INT_Progress: SET
Z_Sess_Exp <-- Assign: ZADD

X_Worker -[#DarkCyan]> Sess_Read: XREADGROUP
H_Sess_Quota <-[#DarkCyan]- Sess_Read: HINCRBY -n

X_Worker -[#DarkCyan]> Task_Exp : XRANGE\nXDEL
Task_Exp -[#DarkCyan]-> X_Results: XADD

X_Worker <-[#DarkCyan] Sess_Ack: XACK\nXDEL
Sess_Ack -[#DarkCyan]> X_Results: XADD

Sess_Read -[hidden]-> Task_Exp
Task_Exp -[hidden]-> Sess_Ack

@enduml
